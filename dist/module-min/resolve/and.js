import Resolver from"../resolver.js";import{create_object,get_max_len}from"../common.js";import{intersect as _intersect}from"../intersect.js";Resolver.prototype.and=function(){if(this.result.length){const a=this;let b=arguments,c=b[0];if(c.then)return c.then(function(){return a.and.apply(a,b)});if(c[0]&&c[0].index)return this.and.apply(this,c);let d,e,f,g=[],h=[],j=0,k=0;for(let a,c=0;c<b.length;c++)if(a=b[c]){j=a.limit||0,k=a.offset||0,d=a.enrich,e=a.resolve,f=a.suggest;let b;if(a.constructor===Resolver)b=a.result;else if(a.constructor===Array)b=a;else if(a.index)a.resolve=!1,b=a.index.search(a).result;else if(a.or)b=this.or(a.or);else if(a.xor)b=this.xor(a.xor);else if(a.not)b=this.not(a.not);else continue;g[c]=b,b.then&&h.push(b)}return g.length?h.length?Promise.all(h).then(function(){return g=[a.result].concat(g),a.result=intersect(g,j,k,d,e,a.boostval,f),e?a.result:a}):(g=[this.result].concat(g),this.result=intersect(g,j,k,d,e,this.boostval,f),e?this.result:this):(this.result=g,e?this.result:this)}return this};function intersect(a,b,c,d,e,f,g){if(2>a.length)return[];let h=create_object(),i=get_max_len(a);return i?_intersect(a,i,b,c,g,f,e):[]}