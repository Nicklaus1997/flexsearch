import{IndexOptions}from"./type.js";import{create_object,is_function,is_object,is_string}from"./common.js";import handler from"./worker/handler.js";let pid=0;export default function WorkerIndex(a){if(!this)return new WorkerIndex(a);a||(a={});let b="undefined"!=typeof self&&(self||window)._factory;b&&(b=b.toString());const c="undefined"==typeof window,d=this;(async function(){function e(a){a=a.data||a;const b=a.id,c=b&&d.resolver[b];c&&(c(a.msg),delete d.resolver[b])}if(this.worker=await create(b,c,a.worker),this.resolver=create_object(),!!this.worker)return c?this.worker.on("message",e):this.worker.onmessage=e,a.config?(delete a.db,new Promise(function(c){d.resolver[++pid]=function(){c(d)},d.worker.postMessage({id:pid,task:"init",factory:b,options:a})})):void this.worker.postMessage({task:"init",factory:b,options:a})}).call(this)}register("add"),register("append"),register("search"),register("update"),register("remove");function register(a){WorkerIndex.prototype[a]=WorkerIndex.prototype[a+"Async"]=function(){const b=this,c=[].slice.call(arguments),d=c[c.length-1];let e;is_function(d)&&(e=d,c.splice(c.length-1,1));const f=new Promise(function(d){b.resolver[++pid]=d,b.worker.postMessage({task:a,id:pid,args:c})});return e?(f.then(e),this):f}}async function create(a,b,c){let d;return d=b?"undefined"==typeof module?(0,eval)("new ((await import(\"worker_threads\"))[\"Worker\"])((1,eval)(\"import.meta.dirname\") + \"/node/node.mjs\")"):(0,eval)("new (require(\"worker_threads\")[\"Worker\"])(__dirname + \"/node/node.js\")"):a?new window.Worker(URL.createObjectURL(new Blob(["onmessage="+handler.toString()],{type:"text/javascript"}))):new window.Worker(is_string(c)?c:"worker/worker.js",{type:"module"}),d}