import{create_object,concat,sort_by_length_up,get_max_len}from"./common.js";export function intersect(a,b,c,d){const e=a.length;let f,g,h,i,j=[],k=0;d&&(d=[]);for(let l,m=e-1;0<=m;m--){i=a[m],h=create_object(),l=!f;for(let a,e=0;e<i.length;e++)if(a=i[e],a&&a.length)for(let i,n=0;n<a.length;n++)if(i=a[n],f){if(f[i]){if(!m)if(c)c--;else if(j[k++]=i,k===b)return j;(m||d)&&(h[i]=1),l=!0}if(d&&!g[i]){g[i]=1;const a=d[e]||(d[e]=[]);a.push(i)}}else h[i]=1;if(d)f||(g=h);else if(!l)return[];f=h}if(d)for(let a,e,g=d.length-1;0<=g;g--){a=d[g],e=a.length;for(let d,g=0;g<e;g++)if(d=a[g],!f[d]){if(c)c--;else if(j[k++]=d,k===b)return j;f[d]=1}}return j}export function intersect_union(a,b){const c=create_object(),d=create_object(),e=[];for(let d=0;d<a.length;d++)c[a[d]]=1;for(let f,g=0;g<b.length;g++){f=b[g];for(let a,b=0;b<f.length;b++)a=f[b],c[a]&&!d[a]&&(d[a]=1,e.push(a))}return e}